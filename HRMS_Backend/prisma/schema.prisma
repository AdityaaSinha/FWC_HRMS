// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // Reads from your .env file
}

// ==========================================
//          ---=== Models ===---
// ==========================================

// Model for all users (Admin, HR, Manager, Employee)
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  employeeId  String?  @unique
  name        String
  password    String
  department  String?
  joinDate    DateTime @default(now())

  // --- MODIFIED: Relation to the Role model ---
  roleId      Int    // Foreign key
  role        Role   @relation(fields: [roleId], references: [id]) // A user has one Role

  // --- Other Relations ---
  postedJobs        Job[]            @relation("PostedBy")
  loginEvents       LoginActivity[]
  uploadedDocuments Document[]       @relation("DocumentUploadedBy")
  documentFavorites DocumentFavorite[]
  documentDownloads DocumentDownload[]
  importJobs        ImportJob[]      @relation("ImportedByUser")
  exportJobs        ExportJob[]      @relation("ExportedByUser")
}

// --- NEW: Role Model (replaces Role enum) ---
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  color       String?  @default("gray")
  createdAt   DateTime @default(now())
  status      String   @default("active")

  // --- Relations ---
  users       User[] // A role can have many users
  permissions Permission[] @relation(name: "RolePermissions") // Many-to-many with Permission

  @@map("roles")
}

// --- NEW: Permission Model ---
model Permission {
  id          String   @id // e.g., "manage_users"
  name        String   // e.g., "User Management"
  category    String   // e.g., "Users"
  description String?

  // --- Relations ---
  roles       Role[]   @relation(name: "RolePermissions") // Many-to-many with Role

  @@map("permissions")
}

// Model for Job Listings
model Job {
  id              Int      @id @default(autoincrement())
  title           String
  department      String
  status          JobStatus @default(OPEN)
  openings        Int      @default(1)
  datePosted      DateTime @default(now())
  jobDescription  String?
  requirements    String?

  // --- Relations ---
  postedBy        User     @relation("PostedBy", fields: [postedById], references: [id], onDelete: Cascade)
  postedById      Int
  applicants      Candidate[]
}

// Model for Job Applicants
model Candidate {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  phone           String?
  dateApplied     DateTime @default(now())
  status          CandidateStatus @default(NEW)
  dateHired       DateTime?

  // --- Relations ---
  appliedFor      Job      @relation(fields: [appliedForJobId], references: [id], onDelete: Cascade)
  appliedForJobId Int
}

// Model to track user login activity
model LoginActivity {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity  String   @default("User logged in")

  @@index([timestamp])
  @@index([userId])
  @@map("login_activity")
}

// Model for Document Categories
model DocumentCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  documents   Document[]

  @@map("document_categories")
}

// Model for Documents
model Document {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  fileName      String
  filePath      String
  fileSize      Int
  mimeType      String
  format        String
  isRequired    Boolean  @default(false)
  isActive      Boolean  @default(true)
  tags          String?
  version       String   @default("1.0")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // --- Relations ---
  category      DocumentCategory @relation(fields: [categoryId], references: [id])
  categoryId    Int
  uploadedBy    User     @relation("DocumentUploadedBy", fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById  Int
  favorites     DocumentFavorite[]
  downloads     DocumentDownload[]

  @@map("documents")
}

// Model for User Document Favorites
model DocumentFavorite {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int

  @@unique([userId, documentId])
  @@map("document_favorites")
}

// Model for Document Download Tracking
model DocumentDownload {
  id           Int      @id @default(autoincrement())
  downloadedAt DateTime @default(now())
  ipAddress    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId   Int

  @@map("document_downloads")
}

// Model for Bulk Import History
model ImportJob {
  id                Int      @id @default(autoincrement())
  fileName          String
  createdAt         DateTime @default(now())
  totalRecords      Int
  successfulRecords Int
  failedRecords     Int
  errorsJson        String?
  importedBy        User     @relation("ImportedByUser", fields: [importedById], references: [id])
  importedById      Int

  @@map("import_jobs")
}

// Model for Bulk Export History
model ExportJob {
  id           Int      @id @default(autoincrement())
  fileName     String
  createdAt    DateTime @default(now())
  format       String
  records      Int
  filtersJson  String?
  exportedBy   User     @relation("ExportedByUser", fields: [exportedById], references: [id])
  exportedById Int

  @@map("export_jobs")
}


// ==========================================
//            ---=== Enums ===---
// ==========================================

// --- DELETED: The Role enum is replaced by the Role model ---
// enum Role { ... }

enum JobStatus {
  OPEN
  CLOSED
  ARCHIVED
}

enum CandidateStatus {
  NEW
  SCREENING
  INTERVIEW
  OFFERED
  HIRED
  REJECTED
}

