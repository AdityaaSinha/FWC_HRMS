// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Model for all users, including HR, Admins, etc.
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  employeeId  String?   @unique 
  name        String
  password    String // We will store a HASHED password, not plain text
  role        Role     @default(EMPLOYEE)
  department  String?
  joinDate    DateTime @default(now())

  // --- Relations ---
  // An HR user can post many jobs
  postedJobs  Job[]    @relation("PostedBy")
  
  // Document relations
  uploadedDocuments Document[] @relation("DocumentUploadedBy")
  documentFavorites DocumentFavorite[]
  documentDownloads DocumentDownload[]
}

// Model for Job Listings
model Job {
  id              Int      @id @default(autoincrement())
  title           String
  department      String
  status          JobStatus @default(OPEN)
  openings        Int      @default(1)
  datePosted      DateTime @default(now())
  jobDescription  String?
  requirements    String?

  // --- Relations ---
  // A job is posted by one HR User
  postedBy        User     @relation("PostedBy", fields: [postedById], references: [id])
  postedById      Int

  // A job can have many applicants
  applicants      Candidate[]
}

// Model for Candidates
model Candidate {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  phone           String?
  dateApplied     DateTime @default(now())
  status          CandidateStatus @default(NEW)
  dateHired       DateTime? // Used to calculate time-to-hire

  // --- Relations ---
  // A candidate applies for one job
  appliedFor      Job      @relation(fields: [appliedForJobId], references: [id])
  appliedForJobId Int
}

// Enums to define strict categories
enum Role {
  EMPLOYEE
  MANAGER
  HR
  ADMIN
}

enum JobStatus {
  OPEN
  CLOSED
  ARCHIVED
}

enum CandidateStatus {
  NEW
  SCREENING
  INTERVIEW
  OFFERED
  HIRED
  REJECTED
}

// Model for Document Categories
model DocumentCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // --- Relations ---
  documents   Document[]
}

// Model for Documents
model Document {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  fileName        String
  filePath        String
  fileSize        Int      // Size in bytes
  mimeType        String
  format          String   // PDF, DOCX, etc.
  isRequired      Boolean  @default(false)
  isActive        Boolean  @default(true)
  downloadCount   Int      @default(0)
  tags            String?  // JSON array of tags
  version         String   @default("1.0")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // --- Relations ---
  category        DocumentCategory @relation(fields: [categoryId], references: [id])
  categoryId      Int
  
  uploadedBy      User     @relation("DocumentUploadedBy", fields: [uploadedById], references: [id])
  uploadedById    Int

  // Document access/favorites
  favorites       DocumentFavorite[]
  downloads       DocumentDownload[]
}

// Model for User Document Favorites
model DocumentFavorite {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())

  // --- Relations ---
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  
  document   Document @relation(fields: [documentId], references: [id])
  documentId Int

  @@unique([userId, documentId])
}

// Model for Document Download Tracking
model DocumentDownload {
  id          Int      @id @default(autoincrement())
  downloadedAt DateTime @default(now())
  ipAddress   String?

  // --- Relations ---
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  
  document    Document @relation(fields: [documentId], references: [id])
  documentId  Int
}